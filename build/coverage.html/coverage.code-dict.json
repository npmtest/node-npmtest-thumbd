{"/home/travis/build/npmtest/node-npmtest-thumbd/test.js":"/* istanbul instrument in package npmtest_thumbd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-thumbd/lib.npmtest_thumbd.js":"/* istanbul instrument in package npmtest_thumbd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_thumbd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_thumbd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-thumbd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-thumbd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_thumbd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_thumbd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_thumbd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_thumbd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_thumbd.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_thumbd.__dirname + '/lib.npmtest_thumbd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/index.js":"exports.Client = require('./client').Client\nexports.Grabber = require('./grabber').Grabber\nexports.Saver = require('./saver').Saver\nexports.Thumbnailer = require('./thumbnailer').Thumbnailer\nexports.Worker = require('./worker').Worker\nexports.Config = require('./config').Config\n\n// expose the raw knox S3 client.\nexports.knox = function (bucket, region) {\n  return require('./utils').s3(bucket, region)\n}\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/client.js":"var aws = require('aws-sdk')\nvar config = require('./config').Config\nvar _ = require('lodash')\n\n/**\n * Initialize the Client\n *\n * @param object opts The Client options\n */\nfunction Client (opts) {\n  // update client instance and config\n  // with overrides from opts.\n  _.extend(this, {\n    Saver: require('./saver').Saver\n  }, opts)\n\n  config.extend(opts)\n\n  // allow sqs to be overridden\n  // in tests.\n  if (opts && opts.sqs) {\n    this.sqs = opts.sqs\n    delete opts.sqs\n  } else {\n    this.sqs = new aws.SQS({\n      accessKeyId: config.get('awsKey'),\n      secretAccessKey: config.get('awsSecret'),\n      region: config.get('awsRegion')\n    })\n  }\n\n  config.set('sqsQueueUrl', this.sqs.endpoint.protocol + '//' + this.sqs.endpoint.hostname + '/' + config.get('sqsQueue'))\n}\n\n/**\n * Upload a local file to S3, so that we can later thumbnail it.\n *\n * @param string source path to local file.\n * @param string destination key of file in remote s3 bucket.\n * @param object opts(optional) optional region/bucket.\n * @param function callback fired when image is uploaded. Optional.\n */\nClient.prototype.upload = function (source, destination, opts, callback) {\n  var saver = new this.Saver()\n\n  // the options hash is optional.\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  }\n  // merge the options hash with defaults from config.\n  opts = _.extend({\n    awsRegion: config.get('awsRegion'),\n    s3Bucket: config.get('s3Bucket')\n  }, opts)\n\n  saver.save(opts.s3Bucket, opts.awsRegion, source, destination, opts.headers, callback)\n}\n\n/**\n * Submit a thumbnailing job over SQS.\n *\n * @param string originalImagePaths Path to the image in S3 that thumbnailing should be performed on,\n *    can optionally be an array of resources.\n * @param array thumbnailDescriptions Thumbnailing meta information, see README.md.\n * @param object opts additional options\n *   @opt prefix alternative prefix for saving thumbnail.\n * @param function callback The callback function. Optional.\n */\nClient.prototype.thumbnail = function (originalImagePaths, thumbnailDescriptions, opts, callback) {\n  /**\n    job = {\n      \"resources\": [\n        \"/foo/awesome.jpg\"\n      ],\n      \"prefix\": \"/foo/awesome\",\n      \"descriptions\": [{\n        \"suffix\": \"small\",\n        \"width\": 64,\n        \"height\": 64\n      }],\n    }\n  */\n\n  // additional options can be provided.\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  }\n\n  // allow for either a single S3 resource, or an array.\n  if (!_.isArray(originalImagePaths)) originalImagePaths = [originalImagePaths]\n\n  // override defaults with opts.\n  opts = _.extend({\n    prefix: originalImagePaths[0].split('.').slice(0, -1).join('.'),\n    resources: originalImagePaths,\n    descriptions: thumbnailDescriptions\n  }, opts)\n\n  this.sqs.sendMessage({QueueUrl: config.get('sqsQueueUrl'), MessageBody: JSON.stringify(opts)}, function (err, result) {\n    if (callback) callback(err, result)\n  })\n}\n\nexports.Client = Client\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/config.js":"var _ = require('lodash')\nvar path = require('path')\n\nexports.Config = {\n  config: {\n    awsKey: process.env.AWS_KEY,\n    awsRegion: process.env.AWS_REGION || 'us-east-1',\n    awsSecret: process.env.AWS_SECRET,\n    convertCommand: (process.env.CONVERT_COMMAND || 'convert'),\n    requestTimeout: (process.env.REQUEST_TIMEOUT || 15000),\n    s3Acl: (process.env.S3_ACL || 'private'),\n    s3Bucket: process.env.BUCKET,\n    s3StorageClass: (process.env.S3_STORAGE_CLASS || 'STANDARD'),\n    sqsQueue: process.env.SQS_QUEUE,\n    tmpDir: (process.env.TMP_DIR || '/tmp'),\n    logger: (process.env.LOGGER_FILE || path.resolve(path.join(__dirname, './logger'))),\n    logLevel: (process.env.LOG_LEVEL || 'info'),\n    profile: !!process.env.PROFILE,\n    metaPrefix: (process.env.META_PREFIX || 'x-amz-meta-'),\n    keepMeta: (process.env.META || true),\n    keepEncryption: (process.env.ENCRYPTION || true)\n  },\n\n  /**\n   * Extend the default configuration settings\n   *\n   * @param object opts The new configration settings\n   *\n   * @return Config\n   */\n  extend: function (opts) {\n    this.config = _.extend(this.config, opts)\n    return this\n  },\n\n  /**\n   * Get all config settings\n   *\n   * @return object\n   */\n  all: function () {\n    return this.config\n  },\n\n  /**\n   * Get a config value\n   *\n   * @param string name The config variable name\n   *\n   * @return mixed or null if not set\n   */\n  get: function (name) {\n    if (this.config[name] !== undefined) return this.config[name]\n    return null\n  },\n\n  /**\n   * Add or update a config setting\n   *\n   * @param string name The config variable name\n   * @param mixed value The value\n   *\n   * @return Config\n   */\n  set: function (name, value) {\n    this.config[name] = value\n    return this\n  },\n\n  /**\n   * Remove a config variable\n   *\n   * @param string name The config variable name\n   *\n   * @return Config\n   */\n  remove: function (name) {\n    if (this.config[name] !== undefined) {\n      delete this.config[name]\n    }\n    return this\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/grabber.js":"var tmp = require('tmp')\nvar utils = require('./utils')\nvar fs = require('fs')\nvar http = require('http')\nvar https = require('https')\nvar config = require('./config').Config\n\n/**\n * Initialize the Grabber\n *\n * @param object s3 The S3 client\n */\nfunction Grabber () {\n  this.logger = require(config.get('logger'))\n}\n\n/**\n * Download an image from S3 or over http(s)\n *\n * @param string remoteImagePath The image url / s3 path\n * @param function} callback The callback function\n */\nGrabber.prototype.download = function (bucket, region, remoteImagePath, callback) {\n  var _this = this\n  var extension = remoteImagePath.split('.').pop()\n\n  tmp.file({dir: config.get('tmpDir'), postfix: '.' + extension}, function (err, localImagePath, fd) {\n    if (err) return callback(err)\n\n    fs.close(fd, function () {\n      _this.logger.info('downloading', remoteImagePath, 'from s3 to local file', localImagePath)\n\n      var stream = fs.createWriteStream(localImagePath)\n\n      if (remoteImagePath.match(/https?:\\/\\//)) { // we are thumbnailing a remote image.\n        _this.getFileHTTP(remoteImagePath, localImagePath, stream, callback)\n      } else { // we are thumbnailing an Object in our thumbnail S3 bucket.\n        _this.getFileS3(bucket, region, remoteImagePath, localImagePath, stream, callback)\n      }\n    }) // close immediately, we do not use this file handle.\n  })\n}\n\n/**\n * Retrieve a file from a http(s) URI\n *\n * @param string remoteImagePath The image URI\n * @param string localImagePath The local image path\n * @param WriteStream stream The stream object for the local file\n * @param function callback The callback function\n */\nGrabber.prototype.getFileHTTP = function (remoteImagePath, localImagePath, stream, callback) {\n  var protocol = remoteImagePath.match('https://') ? https : http\n  var req = protocol.get(remoteImagePath, function (res) {\n    res.on('error', function (err) {\n      stream.end()\n      callback(err)\n    })\n\n    res.on('end', function () {\n      stream.end()\n      callback(null, localImagePath)\n    })\n\n    res.pipe(stream)\n\n  }).on('error', function (err) {\n    stream.end()\n    callback(err)\n  }).on('socket', function (socket) { // abort connection if we're in idle state too long.\n    socket.setTimeout(config.get('requestTimeout'))\n    socket.on('timeout', function () {\n      stream.end()\n      req.abort()\n      callback('socket timed out while downloading ' + remoteImagePath)\n    })\n  })\n}\n\n/**\n * Retrieve a file from S3\n *\n * @param string remoteImagePath The S3 path\n * @param string localImagePath The local image path\n * @param WriteStream stream The stream object for the local file\n * @param function callback The callback function\n */\nGrabber.prototype.getFileS3 = function (bucket, region, remoteImagePath, localImagePath, stream, callback) {\n  var _this = this\n  var req = utils.s3(bucket, region).getFile(remoteImagePath, function (err, res) {\n    // no response should count as an error.\n    res = res || { statusCode: 503 }\n\n    if (err || res.statusCode >= 400) {\n      stream.end()\n      return callback(Error('error retrieving from S3 status ' + res.statusCode))\n    }\n\n    stream.on('finish', function () {\n      stream.close(function () { callback(null, localImagePath, _this.getMeta(res)) })\n    })\n\n    res.pipe(stream)\n\n    res.on('error', function (err) {\n      stream.end()\n      callback(err)\n    })\n\n    res.on('end', function () {\n      stream.end()\n    })\n\n  }).on('socket', function (socket) {  // abort connection if we're in idle state too long.\n    socket.setTimeout(config.get('requestTimeout'))\n    socket.on('timeout', function () {\n      stream.end()\n      req.abort()\n      callback('socket timeout while downloading ' + remoteImagePath)\n    })\n  }).on('error', function (err) {\n    stream.end()\n    callback(err)\n  })\n}\n\n// copy any x-amz-meta prefixed and x-amz-server-side-encryption headers\n// to the thumbnail image being created.\nGrabber.prototype.getMeta = function (res) {\n  var metadata = {}\n  if (config.get('keepMeta') || config.get('keepEncryption')) {\n    for (var prop in res.headers) {\n      if (prop === 'x-amz-server-side-encryption' || prop.slice(0, 11) === config.get('metaPrefix')) {\n        metadata[prop] = res.headers[prop]\n      }\n    }\n  }\n\n  return metadata\n}\n\nexports.Grabber = Grabber\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/utils.js":"var knox = require('knox')\nvar client = null\nvar config = require('./config').Config\n\n/**\n* Create an S3 client, for a specific bucket.\n*\n* @param string bucket S3 bucket to connect to.\n*/\nexports.s3 = function (_bucket, _region) {\n  var bucket = _bucket || config.get('s3Bucket')\n  var region = _region || config.get('awsRegion')\n\n  // Knox wants 'us-standard' instead of 'us-east-1'.\n  if (region === 'us-east-1') region = 'us-standard'\n\n  // cache the most recently used client.\n  if (client && bucket === client.bucket && region === client.region) {\n    return client\n  } else {\n    client = knox.createClient({\n      key: config.get('awsKey'),\n      secret: config.get('awsSecret'),\n      bucket: bucket,\n      region: region\n    })\n  }\n\n  return client\n}\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/saver.js":"var _ = require('lodash')\nvar utils = require('./utils')\nvar url = require('url')\nvar config = require('./config').Config\n\n/**\n * Initialize the Saver\n *\n * @param object s3 The S3 client\n */\nfunction Saver () {\n  this.logger = require(config.get('logger'))\n}\n\n/**\n * Save the (local or remote file) to disk\n *\n * @param string source The local file path, or remote file uri\n * @param string destination The local file path\n * @param function callback The callback function. Optional\n */\nSaver.prototype.save = function (bucket, region, source, destination, metadata, callback) {\n  var _this = this\n\n  if (typeof callback === 'undefined') {\n    callback = function () {}\n  }\n\n  var headers = {\n    'x-amz-acl': config.get('s3Acl'),\n    'x-amz-storage-class': config.get('s3StorageClass')\n  }\n\n  _.extend(headers, metadata) // set additional meta-data headers\n\n  if (destination.match(/https?:\\/\\//)) {\n    destination = this.destinationFromURL(destination)\n  }\n\n  utils.s3(bucket, region).putFile(source, destination, headers, function (err, res) {\n    // if the region or bucket is wrong, this is reflected in a 301.\n    if (res && res.statusCode !== 200) {\n      return callback(Error('upload failure status = ' + res.statusCode))\n    }\n    if (err) return callback(err)\n\n    res.on('error', function (err) {\n      callback(err)\n    })\n\n    res.on('end', function () {\n      _this.logger.info('saved ' + source + ' to ' + destination)\n      callback()\n    })\n    res.resume()\n  })\n}\n\n/**\n * Get a file path from a URL\n *\n * @param string destination The destination url. e.g. http://example.com/foo/test.jpg\n *\n * @return string The file path. E.g. example.com/foo/test.jpg\n */\nSaver.prototype.destinationFromURL = function (destination) {\n  var parsedURL = url.parse(destination)\n  return parsedURL.hostname + parsedURL.path\n}\n\nexports.Saver = Saver\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/thumbnailer.js":"var exec = require('child_process').exec\nvar sprintf = require('sprintf-js').sprintf\nvar _ = require('lodash')\nvar fs = require('fs')\nvar config = require('./config').Config\n\n/**\n * Initialize the Thumbnailer\n */\nfunction Thumbnailer (opts) {\n  // for the benefit of testing\n  // perform dependency injection.\n  _.extend(this, {\n    tmp: require('tmp'),\n    logger: require(config.get('logger'))\n  }, opts)\n}\n\n/**\n * Execute the image conversion command\n *\n * @param object description The job description\n * @param localPath The local path to the image\n * @param function onComplete The callback function\n */\nThumbnailer.prototype.execute = function (description, localPaths, onComplete) {\n  var _this = this\n\n  // Convert single path to array\n  if (!_.isArray(localPaths)) {\n    localPaths = [localPaths]\n  }\n\n  // parameters for a single execution\n  // of the thumbnailer.\n  _.extend(this, {\n    localPaths: localPaths,\n    width: description.width,\n    height: description.height,\n    format: (description.format || 'jpg'),\n    strategy: (description.strategy || 'bounded'),\n    background: (description.background || 'black'),\n    autoOrient: (description.autoOrient || null),\n    quality: (description.quality || null),\n    command: (description.command || config.get('convertCommand')),\n    onComplete: onComplete,\n    thumbnailTimeout: 20000\n  })\n\n  this.createConversionPath(function (err) {\n    if (err) {\n      _this.onComplete(err)\n      return\n    }\n\n    var strategy = _this._guessStrategy()\n    if (strategy) _this[strategy]()\n  })\n}\n\n/**\n * Choose an appropriate image manipulation\n * strategy, based on 'strategy' key in job.\n * If the strategy contains, %(command)s, assume\n * manual strategy:\n *\n * \"%(command)s -border 0 -tile 3x1 -geometry 160x106 \"%(localPaths[0])s\" \"%(localPaths[1])s\" \"%(localPaths[2])s\" -quality 90 %(convertedPath)s\"\n *\n * @return string strategy to execute.\n * @throw strategy not found.\n */\nThumbnailer.prototype._guessStrategy = function () {\n  if (this.strategy.match(/%\\(.*\\)s/)) {\n    return 'manual'\n  } else if (!this[this.strategy]) {\n    this.onComplete(Error('could not find strategy ' + this.strategy))\n  } else {\n    return this.strategy\n  }\n}\n\n/**\n * Create a temp file for the converted image\n *\n * @param function callback The callback function\n */\nThumbnailer.prototype.createConversionPath = function (callback) {\n  var _this = this\n\n  this.tmp.file({dir: config.get('tmpDir'), postfix: '.' + this.format}, function (err, convertedPath, fd) {\n    fs.closeSync(fd) // close immediately, we do not use this file handle.\n    _this.convertedPath = convertedPath\n    callback(err)\n  })\n}\n\n/**\n * Execute the conversion command\n *\n * @param string command The command\n */\nThumbnailer.prototype.execCommand = function (command) {\n  var _this = this\n\n  exec(command, {timeout: this.thumbnailTimeout}, function (err, stdout, stderr) {\n    _this.logger.info('running command ', command)\n\n    if (err) {\n      _this.onComplete(err)\n      return\n    }\n\n    // make sure the conversion was successful.\n    fs.stat(_this.convertedPath, function (err, stat) {\n      if (err || stat.size === 0) {\n        err = 'zero byte thumbnail created'\n        _this.onComplete(err)\n        return\n      }\n      _this.onComplete(null, _this.convertedPath)\n    })\n\n  })\n}\n\n/**\n * Convert the image using the manual strategy.\n * looks for a strategy of the form:\n *\n * \"%(command)s -border 0 -tile 3x1 -geometry 160x106 '%(localPath[0])s' '%(localPath[1])s' '%(localPath[2])s' -quality 90 %(convertedPath)s\n *\n * The custom strategy has access to all variables set on\n * the thumbnailer instance:\n *   * command: the conversion command to run.\n *   * localPaths: the local temp images to apply operation to.\n *   * convertedPath: path to store final thumbnail to on S3.\n */\nThumbnailer.prototype.manual = function () {\n  try {\n    var thumbnailCommand = sprintf(this.strategy, this)\n    this.execCommand(thumbnailCommand)\n  } catch (err) {\n    this.onComplete(err)\n  }\n}\n\n/**\n * Convert the image using the matted strategy\n */\nThumbnailer.prototype.matted = function () {\n  var dimensionsString = this.width + 'X' + this.height\n  var qualityString = (this.quality ? '-quality ' + this.quality : '')\n  var autoOrient = (this.autoOrient ? '-auto-orient' : '')\n  var thumbnailCommand = config.get('convertCommand') + ' \"' + this.localPaths[0] + '[0]\" ' + autoOrient + ' -resize ' + dimensionsString + ' -size ' + dimensionsString + ' xc:' + this.background + ' +swap -gravity center' + qualityString + ' -composite ' + this.convertedPath\n\n  this.execCommand(thumbnailCommand)\n}\n\n/**\n * Convert the image using the bounded strategy\n */\nThumbnailer.prototype.bounded = function () {\n  var dimensionsString = this.width + 'X' + this.height\n  var qualityString = (this.quality ? '-quality ' + this.quality + ' ' : '')\n  var autoOrient = (this.autoOrient ? '-auto-orient' : '')\n  var thumbnailCommand = config.get('convertCommand') + ' \"' + this.localPaths[0] + '[0]\" ' + autoOrient + ' -thumbnail ' + dimensionsString + ' ' + qualityString + this.convertedPath\n\n  this.execCommand(thumbnailCommand)\n}\n\n/**\n * Convert the image using the fill strategy\n */\nThumbnailer.prototype.fill = function () {\n  var dimensionsString = this.width + 'X' + this.height\n  var qualityString = (this.quality ? '-quality ' + this.quality : '')\n  var autoOrient = (this.autoOrient ? '-auto-orient' : '')\n  var thumbnailCommand = config.get('convertCommand') + ' \"' + this.localPaths[0] + '[0]\" ' + autoOrient + ' -resize ' + dimensionsString + '^ -gravity center -extent ' + dimensionsString + ' ' + qualityString + ' ' + this.convertedPath\n\n  this.execCommand(thumbnailCommand)\n}\n\n/**\n * Convert the image using the strict strategy\n */\nThumbnailer.prototype.strict = function () {\n  var dimensionsString = this.width + 'X' + this.height\n  var qualityString = (this.quality ? '-quality ' + this.quality : '')\n  var autoOrient = (this.autoOrient ? '-auto-orient' : '')\n  var thumbnailCommand = config.get('convertCommand') + ' \"' + this.localPaths[0] + '[0]\" ' + autoOrient + ' -resize ' + dimensionsString + '! ' + qualityString + ' ' + this.convertedPath\n\n  this.execCommand(thumbnailCommand)\n}\n\nexports.Thumbnailer = Thumbnailer\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/worker.js":"var _ = require('lodash')\nvar aws = require('aws-sdk')\nvar async = require('async')\nvar config = require('./config').Config\nvar fs = require('fs')\nvar request = require('request')\nvar Thumbnailer = require('./thumbnailer').Thumbnailer\n\n/**\n * Initialize the Worker\n *\n * @param object opts Worker configuration. Optional.\n */\nfunction Worker (opts) {\n  _.extend(this, {\n    grabber: null,\n    saver: null,\n    logger: require(config.get('logger'))\n  }, opts)\n\n  this.sqs = new aws.SQS({\n    accessKeyId: config.get('awsKey'),\n    secretAccessKey: config.get('awsSecret'),\n    region: config.get('awsRegion')\n  })\n\n  config.set('sqsQueueUrl', this.sqs.endpoint.protocol + '//' + this.sqs.endpoint.hostname + '/' + config.get('sqsQueue'))\n}\n\n/**\n * Start the worker\n */\nWorker.prototype.start = function () {\n  this._processSQSMessage()\n}\n\n/**\n * Process the next message in the queue\n */\nWorker.prototype._processSQSMessage = function () {\n  var _this = this\n\n  this.logger.info('wait for message on ' + config.get('sqsQueue'))\n\n  this.sqs.receiveMessage({ QueueUrl: config.get('sqsQueueUrl'), MaxNumberOfMessages: 1 }, function (err, job) {\n    if (err) {\n      _this.logger.error(err)\n      _this._nextJob()\n      return\n    }\n\n    if (!job.Messages || job.Messages.length === 0) {\n      _this._nextJob()\n      return\n    }\n\n    // Handle the message we pulled off the queue.\n    var handle = job.Messages[0].ReceiptHandle\n    var body = null\n\n    try { // a JSON string message body is accepted.\n      body = JSON.parse(job.Messages[0].Body)\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        try {\n          // a Base64 encoded JSON string message body is also accepted.\n          body = JSON.parse(new Buffer(job.Messages[0].Body, 'base64').toString('binary'))\n        } catch (ev) {\n          _this.logger.error('Unable to parse JSON message ' + handle)\n          _this._deleteJob(handle)\n          _this._nextJob()\n          return\n        }\n      } else {\n        _this.logger.error('Unable to parse JSON message ' + handle)\n        _this._deleteJob(handle)\n        _this._nextJob()\n        return\n      }\n    }\n\n    _this._runJob(handle, body, function () {\n      _this._nextJob()\n    })\n  })\n}\n\n/**\n * asynchronously enqueue reading the next thumbnail\n * job off of SQS.\n */\nWorker.prototype._nextJob = function () {\n  var _this = this\n\n  process.nextTick(function () {\n    _this._processSQSMessage()\n  })\n}\n\n/**\n * Process a job from the queue\n *\n * @param string handle The SQS message handle\n * @param object job The job parameters\n * @param function callback The callback function\n */\nWorker.prototype._runJob = function (handle, job, callback) {\n  /**\n    job = {\n      \"original\": \"/foo/awesome.jpg\",\n      // OR:\n      \"resources\": [\n      // List of resources to download\n      ],\n      \"prefix\": \"/foo/awesome\",\n      \"descriptions\": [{\n        \"suffix\": \"small\",\n        \"width\": 64,\n        \"height\": 64\n      }],\n    }\n  */\n\n  // handle legacy, 'original' key vs. 'resources'.\n  if (job.original) job.resources = [job.original]\n\n  // if the prefix is missing, default to the filename.\n  if (!job.prefix) job.prefix = job.resources[0].split('.').slice(0, -1).join('.')\n\n  var _this = this\n\n  async.waterfall([\n    function (done) {\n      async.mapLimit(job.resources, 5, function (resource, done) {\n        _this._downloadFromS3(job.bucket, job.region, resource, done)\n      }, done)\n    },\n    function (s3Downloads, done) {\n      _this._createThumbnails(s3Downloads, job, function (err, uploadedFiles) {\n        async.forEach(_.pluck(s3Downloads, 'localPath'), fs.unlink, function (errUnlink) {\n          if (errUnlink) {\n            _this.logger.warn('WARNING: failed to delete temporary file ' + errUnlink.path)\n          }\n          done(err, uploadedFiles)\n        })\n      })\n    },\n    function (uploadedFiles, done) {\n      job.output = uploadedFiles\n      _this._notify(job, done)\n    }\n  ], function (err) {\n    // delete message\n    _this._deleteJob(handle)\n    if (err) _this.logger.error(err.message)\n    callback()\n  })\n}\n\n/**\n * Download the image from S3\n *\n * @param string remoteImagePath The s3 path to the image\n * @param function callback The callback function\n */\nWorker.prototype._downloadFromS3 = function (bucket, region, remoteImagePath, callback) {\n  // allow a default bucket to be overridden.\n  bucket = bucket || config.get('s3Bucket')\n  region = region || config.get('awsRegion')\n\n  this.grabber.download(bucket, region, remoteImagePath, function (err, localPath, metadata) {\n    // Leave the job in the queue if an error occurs.\n    if (err) return callback(err)\n    callback(null, {localPath: localPath, metadata: metadata})\n  })\n}\n\n/**\n * Create thumbnails for the image\n *\n * @param string localPath The local path to store the images\n * @param object job The job description\n * @param function callback The callback function\n */\nWorker.prototype._createThumbnails = function (s3Downloads, job, callback) {\n  var _this = this\n  var localPaths = _.pluck(s3Downloads, 'localPath')\n  var work = []\n  var bucket = job.bucket || config.get('s3Bucket')\n  var region = job.region || config.get('awsRegion')\n\n  // Check for valid descriptions\n  if (!job.descriptions || !Array.isArray(job.descriptions)) {\n    var err = new Error('Invalid descriptions provided')\n    _this.logger.error(err)\n    return callback(err)\n  }\n\n  // Create thumbnailing work for each thumbnail description.\n  job.descriptions.forEach(function (description) {\n    work.push(function (done) {\n      var remoteImagePath = _this._thumbnailKey(job.prefix, description.suffix, description.format);(new Thumbnailer()).execute(description, localPaths, function (err, convertedImagePath) {\n        if (err) {\n          _this.logger.error(err)\n          done()\n        } else {\n          _this._saveThumbnailToS3(bucket, region, convertedImagePath, remoteImagePath, s3Downloads[0].metadata, function (err) {\n            if (err) _this.logger.error(err)\n            done(null, remoteImagePath)\n          })\n        }\n\n      })\n\n    })\n  })\n\n  // perform thumbnailing in parallel.\n  async.parallel(work, callback)\n}\n\n/**\n * Save the thumbnail to S3\n *\n * @param string convertedImagePath The local path to the image\n * @param string remoteImagePath The S3 path for the image\n * @param function callback The callback function\n */\nWorker.prototype._saveThumbnailToS3 = function (bucket, region, convertedImagePath, remoteImagePath, metadata, callback) {\n  this.saver.save(bucket, region, convertedImagePath, remoteImagePath, metadata, function (err) {\n    fs.unlink(convertedImagePath, function () {\n      callback(err)\n    })\n  })\n}\n\n/**\n * Generate a path for this thumbnail\n *\n * @param string original The original image path\n * @param string suffix The thumbnail suffix. e.g. \"small\"\n * @param string format The thumbnail format. e.g. \"jpg\". Optional.\n */\nWorker.prototype._thumbnailKey = function (prefix, suffix, format) {\n  return prefix + '_' + suffix + '.' + (format || 'jpg')\n}\n\n/**\n * Remove a job from the queue\n *\n * @param string handle The SQS message handle\n */\nWorker.prototype._deleteJob = function (handle) {\n  var _this = this\n\n  this.sqs.deleteMessage({QueueUrl: config.get('sqsQueueUrl'), ReceiptHandle: handle}, function (err, resp) {\n    if (err) {\n      _this.logger.error('error deleting thumbnail job ' + handle, err)\n      return\n    }\n    _this.logger.info('deleted thumbnail job ' + handle)\n  })\n}\n\n/**\n * Call notification url\n *\n * @param string job: the body of the SQS job.\n */\nWorker.prototype._notify = function (job, cb) {\n  var _this = this\n\n  if (!job.notify) return cb()\n\n  var options = {\n    method: 'POST',\n    url: job.notify,\n    json: true,\n    body: job\n  }\n\n  request.post(options, function (err) {\n    if (!err) _this.logger.error('notified:', job.notify)\n    return cb()\n  })\n}\n\nexports.Worker = Worker\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/bin/thumbd.js":"#!/usr/bin/env node\n\nvar thumbd = require('../lib')\nvar _ = require('lodash')\nvar fs = require('fs')\nvar yargs = require('yargs')\n    .option('k', {\n      alias: 'aws_key',\n      description: 'AWS key id',\n      required: true,\n      default: process.env.AWS_KEY\n    })\n    .option('s', {\n      alias: 'aws_secret',\n      required: true,\n      description: 'AWS key secret',\n      default: process.env.AWS_SECRET\n    })\n    .option('e', {\n      alias: 'aws_region',\n      description: 'AWS Region',\n      default: process.env.AWS_REGION\n    })\n    .option('image_region', {\n      description: 'region of S3 image, if it differes from the default AWS_REGION'\n    })\n    .option('q', {\n      alias: 'sqs_queue',\n      required: true,\n      description: 'AWS SQS queue',\n      default: process.env.SQS_QUEUE\n    })\n    .option('b', {\n      alias: 'bucket',\n      required: true,\n      description: 'AWS S3 bucket',\n      default: process.env.BUCKET\n    })\n    .option('t', {\n      alias: 'tmp_dir',\n      description: 'temporary directory for image conversion'\n    })\n    .option('v', {\n      alias: 'convert_command',\n      description: 'convert command to use'\n    })\n    .option('a', {\n      alias: 's3_acl',\n      description: 'default S3 ACL'\n    })\n    .option('o', {\n      alias: 's3_storage_class',\n      description: 'S3 storage class'\n    })\n    .option('r', {\n      alias: 'remote_image',\n      description: 'path to image on S3 (used by thumbnail command)'\n    })\n    .option('d', {\n      alias: 'descriptions',\n      description: 'path to JSON manifest describing thumbnail conversions (used by thumbnail command)'\n    })\n    .option('p', {\n      alias: 'profile',\n      type: 'boolean',\n      description: 'start thumbd with profiler running'\n    })\n    .option('l', {\n      alias: 'log_level',\n      description: 'set log level (info|warn|error|silent)'\n    })\n    .option('c', {\n      alias: 'custom_logger',\n      description: 'path to custom logger'\n    })\n    .usage('Usage: $0 <command>')\n    .command('server', 'start a thumbnailing server')\n    .command('thumbnail', 'given S3 path and description, thumbnail an image')\n    .command('install', 'install thumbd as OS service wrapper')\n    .command('start', 'start the thumbd service')\n    .command('stop', 'stop the thumbd service')\n    .command('restart', 'restart the thumbd service')\n    .command('remove', 'remove the thumbd service')\n    .help('h')\n    .alias('h', 'help')\nvar argv = yargs.argv\nvar mode = argv._.shift()\nvar config = require('../lib/config').Config\nvar serverOpts = {\n  aws_key: 'awsKey',\n  aws_secret: 'awsSecret',\n  aws_region: 'awsRegion',\n  bucket: 's3Bucket',\n  convert_command: 'convertCommand',\n  s3_acl: 's3Acl',\n  s3_storage_class: 's3StorageClass',\n  sqs_queue: 'sqsQueue',\n  tmp_dir: 'tmpDir',\n  log_level: 'logLevel',\n  custom_logger: 'logger',\n  profile: 'profile'\n}\nvar thumbnailOpts = {\n  aws_key: 'awsKey',\n  aws_secret: 'awsSecret',\n  aws_region: 'awsRegion',\n  descriptions: 'descriptions',\n  remote_image: 'remoteImage',\n  sqs_queue: 'sqsQueue',\n  bucket: 's3Bucket',\n  log_level: 'logLevel',\n  custom_logger: 'logger'\n}\nvar ndm = require('ndm')('thumbd')\nvar opts = null\n\n// make console output nicer for missing arguments.\nprocess.on('uncaughtException', function (err) {\n  var logger = require(config.get('logger'))\n  logger.error(err.message)\n})\n\n/**\n * Extract the command line parameters\n *\n * @param object keys A mapping of cli option => config key names\n *\n * @return object\n */\nfunction buildOpts (keys) {\n  var opts = {}\n  var pairs = _.pairs(keys)\n  for (var i in pairs) {\n    var argvKey = pairs[i][0]\n    var envKey = argvKey.toUpperCase()\n    var configKey = pairs[i][1]\n    opts[configKey] = argv[argvKey] || config.get(configKey)\n    if (opts[configKey] === null) {\n      throw Error(\"The environment variable '\" + envKey + \"', or command line parameter '--\" + argvKey + \"' must be set.\")\n    }\n  }\n  return opts\n}\n\nswitch (mode) {\n  case 'server':\n\n    opts = buildOpts(serverOpts)\n    config.extend(opts)\n\n    var grabber = new thumbd.Grabber()\n    var saver = new thumbd.Saver();(new thumbd.Worker({\n      saver: saver,\n      grabber: grabber\n    })).start()\n    break\n\n  case 'thumbnail':\n\n    opts = buildOpts(thumbnailOpts)\n    var extraOpts = {}\n\n    // allow region/bucket to vary on a job by job basis.\n    if (argv.bucket) extraOpts.bucket = argv.bucket\n    if (argv.aws_region) extraOpts.region = argv.aws_region\n    if (argv.image_region) extraOpts.region = argv.image_region\n\n    config.extend(opts)\n\n    var client = new thumbd.Client()\n    var logger = require(config.get('logger'))\n\n    client.thumbnail(\n      opts.remoteImage,\n      JSON.parse(fs.readFileSync(opts.descriptions).toString()),\n      extraOpts,\n      function (err, res) {\n        if (err) {\n          logger.error(err)\n        } else {\n          logger.info(res)\n        }\n      }\n    )\n    break\n  case 'install':\n    ndm.install()\n    break\n  case 'remove':\n    ndm.remove()\n    break\n  case 'start':\n    ndm.start()\n    break\n  case 'restart':\n    ndm.restart()\n    break\n  case 'stop':\n    ndm.stop()\n    break\n  case 'list-scripts':\n    ndm.listScripts()\n    break\n  case 'run-script':\n    ndm.runScript()\n    break\n  default:\n    yargs.showHelp()\n}\n\n// start a profiling server.\nif (config.get('profile')) require('look').start(process.env.PORT || 5959)\n","/home/travis/build/npmtest/node-npmtest-thumbd/node_modules/thumbd/lib/logger.js":"var config = require('./config').Config\n\nexports.info = function () {\n  if (config.get('logLevel') === 'info') console.info.apply(this, arguments)\n}\n\nexports.warn = function () {\n  var logLevel = config.get('logLevel')\n\n  if (logLevel === 'info' || logLevel === 'warn') console.warn.apply(this, arguments)\n}\n\nexports.error = function () {\n  if (config.get('logLevel') !== 'silent') console.warn.apply(this, arguments)\n}\n"}